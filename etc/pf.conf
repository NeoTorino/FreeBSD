# FreeBSD /etc/pf.conf
# https://gist.github.com/steakknife/57c037c5d9768cbd5ee5
#
# installation
#
#  (copy this file as /etc/pf.conf)
#  (add pf_enable="YES" to /etc/rc.conf)
#  (add net.inet.tcp.tso=0 to /etc/sysctl.conf)
#  mkdir -p /etc/pf
#  touch /etc/pf/blocked.ips.conf
#  touch /etc/pf/blocked.nets.conf
#  touch /etc/pf/trusted.ips.conf
#  echo 172.16.0.0/12 > /etc/pf/trusted.nets.conf

#  enable
#
#  note: this will often disconnect all existing ssh sessions
#
#  sysctl net.inet.tcp.tso=0 && service pf start 

# allow ping reply and path MTU discovery
ext_if  = "lagg0"
int_if  = "lo0"
jail_if = "lo1"
#jail_if = "{ bridge0, bridge10, epair0a, epair10a, epair11a, epair20a, epair30a }"

allow_icmp   = "{ echoreq, unreach }"   # echoreq = ping reply, unreach = path MTU discovery
privoxy = 8118

# trusted overrides blocked
# pfctl -vvsTables
table <blocked_nets>   persist file "/etc/pf/blocked.nets.conf"  # pfctl -t blocked_nets -T show
table <blocked_ips>    persist file "/etc/pf/blocked.ips.conf"   # pfctl -t blocked_ips -T show
                                                                 # /etc/pf.block.ip.conf -> /etc/pf/blocked_ips
table <trusted_nets>   persist file "/etc/pf/trusted.nets.conf"  # pfctl -t trusted_nets -T show
table <trusted_ips>    persist file "/etc/pf/trusted.ips.conf"   # pfctl -t trusted_ips -T show

# broadcasts disabled
#
# multicast disabled
# to enable all multicast traffic, add this to /etc/pf/trusted_nets.conf
#  ff00::/8
# 224.0.0.0/4
table <martians> const {                                        \
    0.0.0.0/8,          10.0.0.0/8,         92.168.0.0/16,      \
    100.64.0.0/10,      127.0.0.0/8,        169.254.0.0/16,     \
    172.16.0.0/12,      192.0.2.0/24,       198.18.0.0/15,      \
    198.51.100.0/24,    203.0.113.0/24,     224.0.0.0/4,        \
    240.0.0.0/4,        ::/128,             ::1/128,            \
    64:ff9b::/96,       ::ffff:0:0/96,      100::/64,           \
    2001::/23,          2002::/16,          fc00::/7,           \
    ff00::/8                                                    \
}
# scrub provides a measure of protection against certain kinds of attacks
# based on incorrect handling of packet fragments
scrub in all fragment reassemble

# NAT
nat on $ext_if inet from any to any -> ($ext_if) port 1024:65535 static-port

# redirect traffic
#rdr pass on $int_if proto tcp from any to any port 80 -> 127.0.0.1 port $privoxy

# drop everything
block drop log (all) all
block drop inet6 all
#pass all

# all everything out from us
pass out keep state

# trusted interfaces i/o: allow traffic on trusted interfaces
set skip on lo

### ...say NO to probes! operation: blackhole
### * F : FIN  - Finish; end of session
### * S : SYN  - Synchronize; indicates request to start session
### * R : RST  - Reset; drop a connection
### * P : PUSH - Push; packet is sent immediately
### * A : ACK  - Acknowledgement
### * U : URG  - Urgent
### * E : ECE  - Explicit Congestion Notification Echo
### * W : CWR  - Congestion Window Reduced
block in quick log (all) on $ext_if proto tcp flags FUP/WEUAPRSF
block in quick log (all) on $ext_if proto tcp flags WEUAPRSF/WEUAPRSF
block in quick log (all) on $ext_if proto tcp flags SRAFU/WEUAPRSF
block in quick log (all) on $ext_if proto tcp flags /WEUAPRSF
block in quick log (all) on $ext_if proto tcp flags SR/SR
block in quick log (all) on $ext_if proto tcp flags SF/SF

block in quick log (all) from no-route to any
block in quick log (all) on $ext_if from urpf-failed to any

antispoof log for $ext_if

block drop in quick log (all) on $ext_if from <martians>
block drop out quick log (all) on $ext_if to <martians>

block drop in quick log (all) on $ext_if from { <blocked_nets>, <blocked_ips> }
block drop out quick log (all) on $ext_if to { <blocked_nets>, <blocked_ips> }

#pass in quick on $ext_if from { <trusted_nets>, <trusted_ips> }
#pass out quick on $ext_if to { <trusted_nets>, <trusted_ips> }

# add your rules here
#
#pass out on $ext_if proto tcp all modulate state flags S/SA
#pass out on $ext_if proto udp all keep state

# Allow DHCP
#pass in quick on $ext_if proto udp from port = 68 to port = 67
#pass out quick on $ext_if proto udp from proto = 67 to port = 68
pass quick inet proto tcp from any port 67:68 to any port 67:68 keep state flags S/SA
pass quick inet proto udp from any port 67:68 to any port 67:68 keep state

pass in on $ext_if inet proto tcp to port { 22 } modulate state flags S/SA

pass out quick on $ext_if inet proto icmp all icmp-type $allow_icmp keep state
pass out quick on $ext_if inet proto tcp to port { 22 80 443 } modulate state flags S/SA
pass out quick on $ext_if inet proto udp to port { 53 123 } keep state
